package tests

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"testing"
	"time"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type Sub struct {
	ID          string `json:"id,omitempty"`
	UserID      string `json:"user_id"`
	ServiceName string `json:"service_name"`
	Price       int    `json:"price"`
	StartDate   string `json:"start_date"`
	EndDate     string `json:"end_date,omitempty"`
}

type ListSubsResponse struct {
	Subs          []Sub  `json:"subs"`
	NextPageToken string `json:"next_page_token"`
}

type Summary struct {
	UserID      string `json:"user_id"`
	ServiceName string `json:"service_name,omitempty"`
	TotalPrice  int    `json:"total_price"`
}

const (
	TimeLayout = "01-2006"
)

func TestSubscriptionsAPI(t *testing.T) {
	apiBaseURL := fmt.Sprintf("http://%s/api/v1", os.Getenv("HTTP_ADDRESS"))

	var createdSubID string

	userID1 := uuid.New().String()
	userID2 := uuid.New().String()

	t.Run("POST /subs - Create Subscription", func(t *testing.T) {
		t.Run("Success - 201 Created", func(t *testing.T) {
			newSub := Sub{
				UserID:      userID1,
				ServiceName: "Netflix",
				Price:       1000,
				StartDate:   time.Now().Format(TimeLayout),
			}

			body, _ := json.Marshal(newSub)
			req, _ := http.NewRequest(http.MethodPost, apiBaseURL+"/subs", bytes.NewBuffer(body))
			req.Header.Set("Content-Type", "application/json")

			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusCreated, resp.StatusCode)

			var createdSub Sub
			err = json.NewDecoder(resp.Body).Decode(&createdSub)
			require.NoError(t, err)

			assert.NotEmpty(t, createdSub.ID, "ID should be generated by server")
			assert.Equal(t, newSub.UserID, createdSub.UserID)
			assert.Equal(t, newSub.ServiceName, createdSub.ServiceName)

			createdSubID = createdSub.ID
		})

		t.Run("Failure - 400 Bad Request (Invalid Price)", func(t *testing.T) {
			invalidSub := Sub{
				UserID:      userID2,
				ServiceName: "Spotify",
				Price:       -100,
				StartDate:   time.Now().Format(TimeLayout),
			}

			body, _ := json.Marshal(invalidSub)
			req, _ := http.NewRequest(http.MethodPost, apiBaseURL+"/subs", bytes.NewBuffer(body))
			req.Header.Set("Content-Type", "application/json")

			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusBadRequest, resp.StatusCode)
		})
	})

	require.NotEmpty(t, createdSubID, "Cannot proceed without a created subscription ID")

	t.Run("GET /subs/{id} - Get Subscription by ID", func(t *testing.T) {
		t.Run("Success - 200 OK", func(t *testing.T) {
			req, _ := http.NewRequest(http.MethodGet, fmt.Sprintf("%s/subs/%s", apiBaseURL, createdSubID), nil)
			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusOK, resp.StatusCode)

			var sub Sub
			err = json.NewDecoder(resp.Body).Decode(&sub)
			require.NoError(t, err)
			assert.Equal(t, createdSubID, sub.ID)
			assert.Equal(t, "Netflix", sub.ServiceName)
		})

		t.Run("Failure - 404 Not Found", func(t *testing.T) {
			req, _ := http.NewRequest(http.MethodGet,
				fmt.Sprintf("%s/subs/%s", apiBaseURL, uuid.New().String()), nil)
			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusNotFound, resp.StatusCode)
		})
	})

	t.Run("PUT /subs/{id} - Update Subscription", func(t *testing.T) {
		t.Run("Success - 200 OK", func(t *testing.T) {
			updatedSub := Sub{
				UserID:      userID1,
				ServiceName: "Netflix Premium",
				Price:       1500,
				StartDate:   time.Now().Format(TimeLayout),
			}
			body, _ := json.Marshal(updatedSub)
			url := fmt.Sprintf("%s/subs/%s", apiBaseURL, createdSubID)
			req, _ := http.NewRequest(http.MethodPut, url, bytes.NewBuffer(body))
			req.Header.Set("Content-Type", "application/json")

			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusOK, resp.StatusCode)

			var resultSub Sub
			err = json.NewDecoder(resp.Body).Decode(&resultSub)
			require.NoError(t, err)

			assert.Equal(t, "Netflix Premium", resultSub.ServiceName)
			assert.Equal(t, 1500, resultSub.Price)
		})
	})

	t.Run("GET /subs - List Subscriptions", func(t *testing.T) {
		t.Run("Success - 200 OK with user_id", func(t *testing.T) {
			req, _ := http.NewRequest(
				http.MethodGet,
				fmt.Sprintf("%s/subs?user_id=%s", apiBaseURL, userID1), nil)
			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusOK, resp.StatusCode)

			var listResp ListSubsResponse
			err = json.NewDecoder(resp.Body).Decode(&listResp)
			require.NoError(t, err)

			assert.GreaterOrEqual(t, len(listResp.Subs), 1)
			assert.Equal(t, userID1, listResp.Subs[0].UserID)
		})

		t.Run("Failure - 400 Bad Request without user_id", func(t *testing.T) {
			req, _ := http.NewRequest(http.MethodGet, apiBaseURL+"/subs", nil)
			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusBadRequest, resp.StatusCode)
		})
	})

	t.Run("GET /subs/summary - Get Summary", func(t *testing.T) {
		t.Run("Success - 200 OK", func(t *testing.T) {
			req, _ := http.NewRequest(
				http.MethodGet,
				fmt.Sprintf("%s/subs/summary?user_id=%s", apiBaseURL, userID1), nil)
			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusOK, resp.StatusCode)

			var summary Summary
			err = json.NewDecoder(resp.Body).Decode(&summary)
			require.NoError(t, err)

			assert.Equal(t, userID1, summary.UserID)
			assert.GreaterOrEqual(t, summary.TotalPrice, 1500)
		})
	})

	t.Run("DELETE /subs/{id} - Delete Subscription", func(t *testing.T) {
		t.Run("Success - 200 OK", func(t *testing.T) {
			url := fmt.Sprintf("%s/subs/%s", apiBaseURL, createdSubID)
			req, _ := http.NewRequest(http.MethodDelete, url, nil)

			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusOK, resp.StatusCode)
		})

		t.Run("Check deletion - 404 Not Found", func(t *testing.T) {
			url := fmt.Sprintf("%s/subs/%s", apiBaseURL, createdSubID)
			req, _ := http.NewRequest(http.MethodGet, url, nil)

			resp, err := http.DefaultClient.Do(req)
			require.NoError(t, err)
			defer resp.Body.Close()

			assert.Equal(t, http.StatusNotFound, resp.StatusCode)
		})
	})
}
